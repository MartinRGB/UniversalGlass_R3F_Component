import * as THREE from 'three'
import { Canvas } from '@react-three/fiber'
import { useGLTF, AccumulativeShadows, RandomizedLight, Environment, OrbitControls, Center,Box } from '@react-three/drei'
import { useControls } from 'leva'
import { Perf } from 'r3f-perf'
import { MeshTransmissionMaterial } from './MeshTransmissionMaterial'

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 gelatinous_cube.glb --transform --simplify
Author: glenatron (https://sketchfab.com/glenatron)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/gelatinous-cube-e08385238f4d4b59b012233a9fbdca21
Title: Gelatinous Cube
*/

export function GelatinousCube(props: JSX.IntrinsicElements['group']) {
    const config = useControls({
      meshPhysicalMaterial: false,
      transmissionSampler: false,
      backside: false,
      samples: { value: 10, min: 1, max: 32, step: 1 },
      resolution: { value: 2048, min: 256, max: 2048, step: 256 },
      transmission: { value: 1, min: 0, max: 1 },
      roughness: { value: 0.0, min: 0, max: 1, step: 0.01 },
      thickness: { value: 3.5, min: 0, max: 10, step: 0.01 },
      ior: { value: 1.5, min: 1, max: 5, step: 0.01 },
      chromaticAberration: { value: 0.06, min: 0, max: 1 },
      anisotropy: { value: 0.1, min: 0, max: 1, step: 0.01 },
      distortion: { value: 0.0, min: 0, max: 1, step: 0.01 },
      distortionScale: { value: 0.3, min: 0.01, max: 1, step: 0.01 },
      temporalDistortion: { value: 0.5, min: 0, max: 1, step: 0.01 },
      clearcoat: { value: 1, min: 0, max: 1 },
      attenuationDistance: { value: 0.5, min: 0, max: 10, step: 0.01 },
      attenuationColor: '#ffffff',
      color: '#c9ffa1',
      bg: '#839681'
    })
    const { nodes, materials }:any = useGLTF('/gelatinous_cube-transformed.glb')
    return (
      <group dispose={null}>
        <mesh geometry={nodes.cube1.geometry} position={[-0.56, 1, -5.11]}>
          {config.meshPhysicalMaterial ? <meshPhysicalMaterial {...config} /> : <MeshTransmissionMaterial background={new THREE.Color(config.bg)} {...config} />}
        </mesh>
        {/* <mesh geometry={nodes.cube1.geometry} position={[-0.56, 1, 16.11]}>
          {config.meshPhysicalMaterial ? <meshPhysicalMaterial {...config} /> : <MeshTransmissionMaterial background={new THREE.Color(config.bg)} {...config} />}
        </mesh> */}
        <Box position={[-0.56, 4, 16.11]} args={[4,4,4]}>
          {config.meshPhysicalMaterial ? <meshPhysicalMaterial {...config} /> : <MeshTransmissionMaterial background={new THREE.Color(config.bg)} {...config} />}
        </Box>
        {/* <mesh
          castShadow
          renderOrder={-100}
          geometry={nodes.cube2.geometry}
          material={materials.cube_mat}
          material-side={THREE.FrontSide}
          position={[-0.56, 1, -5.11]}
        /> */}
        {/* <mesh geometry={nodes.bubbles.geometry} material={materials.cube_bubbles_mat} position={[-0.56, 1, -5.11]} /> */}
        <group position={[-0.56, 1, -5.11]}>
          <mesh geometry={nodes.arrows.geometry} material={materials.weapons_mat} />
          <mesh geometry={nodes.skeleton_1.geometry} material={materials.skele_mat} />
          <mesh geometry={nodes.skeleton_2.geometry} material={materials.weapons_mat} material-side={THREE.FrontSide} />
        </group>
      </group>
    )
  }


export default function TransmissionDemoReference() {
  return (
    <>
      <ambientLight />
      <group position={[0, -2.5, 0]}>
        <Center top>
          <GelatinousCube />
        </Center>
        <AccumulativeShadows temporal frames={100} alphaTest={0.9} color="#3ead5d" colorBlend={1} opacity={0.8} scale={20}>
          <RandomizedLight radius={10} ambient={0.5} intensity={1} position={[2.5, 8, -2.5]} bias={0.001} />
        </AccumulativeShadows>
      </group>
      {/* <OrbitControls minPolarAngle={0} maxPolarAngle={Math.PI / 2} autoRotate autoRotateSpeed={0.05} makeDefault /> */}
      <Environment files="https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/dancing_hall_1k.hdr" background blur={1} />
      {/* <Perf position="top-left" /> */}
    </>
  )
}
